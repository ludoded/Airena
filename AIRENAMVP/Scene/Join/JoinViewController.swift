//
//  JoinViewController.swift
//  AIRENAMVP
//
//  Created by Haik Ampardjian on 8/30/17.
//  Copyright (c) 2017 challengeme llc. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import MBProgressHUD

protocol JoinDisplayLogic: class
{
    func displaySomething(viewModel: Join.Something.ViewModel)
}

class JoinViewController: UIViewController, JoinDisplayLogic
{
    var interactor: JoinBusinessLogic?
    var router: (NSObjectProtocol & JoinRoutingLogic & JoinDataPassing)?
    
    var refreshControl: UIRefreshControl!
    
    fileprivate let viewModel = JoinViewModel()
    
    @IBOutlet weak var tableView: UITableView!
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup()
    {
        let viewController = self
        let interactor = JoinInteractor()
        let presenter = JoinPresenter()
        let router = JoinRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    private func registerCell() {
        tableView.register(JoinCell.nib, forCellReuseIdentifier: JoinCell.cellId)
    }
    
    private func setupTableView() {
        tableView.estimatedRowHeight = 60
        tableView.rowHeight = UITableViewAutomaticDimension
    }
    
    private func setupRefreshControl() {
        refreshControl = UIRefreshControl()
        refreshControl.addTarget(self, action: #selector(loadChallenges), for: .valueChanged)
        tableView.addSubview(refreshControl)
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?)
    {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad()
    {
        super.viewDidLoad()
        
        setupTableView()
        registerCell()
        loadChallenges()
        setupRefreshControl()
    }
    
    // MARK: Do something
    func loadChallenges() {
        self.refreshControl?.beginRefreshing()
        MBProgressHUD.showAdded(to: view, animated: true)
        
        viewModel.fetchChallenges { [unowned self] (error) in
            DispatchQueue.main.async {
                self.refreshControl?.endRefreshing()
                MBProgressHUD.hide(for: self.view, animated: true)
                self.tableView.reloadData()
            }
        }
    }
    
    //@IBOutlet weak var nameTextField: UITextField!
    
    func doSomething()
    {
        let request = Join.Something.Request()
        interactor?.doSomething(request: request)
    }
    
    func displaySomething(viewModel: Join.Something.ViewModel)
    {
        //nameTextField.text = viewModel.name
    }
}

extension JoinViewController: UITableViewDataSource {
    func numberOfSections(in tableView: UITableView) -> Int {
        return 1
    }
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return viewModel.challenges.count
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        guard let cell = tableView.dequeueReusableCell(withIdentifier: JoinCell.cellId, for: indexPath) as? JoinCell else { fatalError("Can't load the cell") }
        let join = viewModel.challenges[indexPath.row]
        cell.setup(with: join)
        
        return cell
    }
}

extension JoinViewController: UITableViewDelegate {
    func tableView(_ tableView: UITableView, heightForFooterInSection section: Int) -> CGFloat {
        return 0.01
    }
    
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        tableView.deselectRow(at: indexPath, animated: true)
        performSegue(withIdentifier: "showJoinTimer", sender: nil)
    }
}
