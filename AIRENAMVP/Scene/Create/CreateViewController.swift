//
//  CreateViewController.swift
//  AIRENAMVP
//
//  Created by Haik Ampardjian on 8/30/17.
//  Copyright (c) 2017 challengeme llc. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol CreateDisplayLogic: class
{
    func displaySomething(viewModel: Create.Something.ViewModel)
}

class CreateViewController: UIViewController, CreateDisplayLogic
{
    var interactor: CreateBusinessLogic?
    var router: (NSObjectProtocol & CreateRoutingLogic & CreateDataPassing)?
    
    @IBAction func openChallenge(_ sender: UIButton) {
        performSegue(withIdentifier: "openAddChallenge", sender: nil)
    }
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup()
    {
        let viewController = self
        let interactor = CreateInteractor()
        let presenter = CreatePresenter()
        let router = CreateRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if segue.identifier == "openAddChallenge" {
            guard let vc = segue.destination as? AddChallengeViewController else { fatalError() }
            vc.type = ChallengeType.private
        }
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad()
    {
        super.viewDidLoad()
        doSomething()
    }
    
    // MARK: Do something
    
    //@IBOutlet weak var nameTextField: UITextField!
    
    func doSomething()
    {
        let request = Create.Something.Request()
        interactor?.doSomething(request: request)
    }
    
    func displaySomething(viewModel: Create.Something.ViewModel)
    {
        //nameTextField.text = viewModel.name
    }
}
